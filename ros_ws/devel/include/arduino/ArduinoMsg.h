// Generated by gencpp from file arduino/ArduinoMsg.msg
// DO NOT EDIT!


#ifndef ARDUINO_MESSAGE_ARDUINOMSG_H
#define ARDUINO_MESSAGE_ARDUINOMSG_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace arduino
{
template <class ContainerAllocator>
struct ArduinoMsg_
{
  typedef ArduinoMsg_<ContainerAllocator> Type;

  ArduinoMsg_()
    : Steering(0.0)
    , Throttle(0.0)
    , Speed(0.0)
    , Mod1(0)
    , Mod2(0)  {
    }
  ArduinoMsg_(const ContainerAllocator& _alloc)
    : Steering(0.0)
    , Throttle(0.0)
    , Speed(0.0)
    , Mod1(0)
    , Mod2(0)  {
  (void)_alloc;
    }



   typedef float _Steering_type;
  _Steering_type Steering;

   typedef float _Throttle_type;
  _Throttle_type Throttle;

   typedef float _Speed_type;
  _Speed_type Speed;

   typedef int32_t _Mod1_type;
  _Mod1_type Mod1;

   typedef int32_t _Mod2_type;
  _Mod2_type Mod2;





  typedef boost::shared_ptr< ::arduino::ArduinoMsg_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::arduino::ArduinoMsg_<ContainerAllocator> const> ConstPtr;

}; // struct ArduinoMsg_

typedef ::arduino::ArduinoMsg_<std::allocator<void> > ArduinoMsg;

typedef boost::shared_ptr< ::arduino::ArduinoMsg > ArduinoMsgPtr;
typedef boost::shared_ptr< ::arduino::ArduinoMsg const> ArduinoMsgConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::arduino::ArduinoMsg_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::arduino::ArduinoMsg_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::arduino::ArduinoMsg_<ContainerAllocator1> & lhs, const ::arduino::ArduinoMsg_<ContainerAllocator2> & rhs)
{
  return lhs.Steering == rhs.Steering &&
    lhs.Throttle == rhs.Throttle &&
    lhs.Speed == rhs.Speed &&
    lhs.Mod1 == rhs.Mod1 &&
    lhs.Mod2 == rhs.Mod2;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::arduino::ArduinoMsg_<ContainerAllocator1> & lhs, const ::arduino::ArduinoMsg_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace arduino

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::arduino::ArduinoMsg_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::arduino::ArduinoMsg_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::arduino::ArduinoMsg_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::arduino::ArduinoMsg_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::arduino::ArduinoMsg_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::arduino::ArduinoMsg_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::arduino::ArduinoMsg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "2dd34a0ac459b6a9c29d0a7b4fcad2b7";
  }

  static const char* value(const ::arduino::ArduinoMsg_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x2dd34a0ac459b6a9ULL;
  static const uint64_t static_value2 = 0xc29d0a7b4fcad2b7ULL;
};

template<class ContainerAllocator>
struct DataType< ::arduino::ArduinoMsg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "arduino/ArduinoMsg";
  }

  static const char* value(const ::arduino::ArduinoMsg_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::arduino::ArduinoMsg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float32 Steering\n"
"float32 Throttle\n"
"float32 Speed\n"
"int32 Mod1\n"
"int32 Mod2\n"
;
  }

  static const char* value(const ::arduino::ArduinoMsg_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::arduino::ArduinoMsg_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.Steering);
      stream.next(m.Throttle);
      stream.next(m.Speed);
      stream.next(m.Mod1);
      stream.next(m.Mod2);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct ArduinoMsg_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::arduino::ArduinoMsg_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::arduino::ArduinoMsg_<ContainerAllocator>& v)
  {
    s << indent << "Steering: ";
    Printer<float>::stream(s, indent + "  ", v.Steering);
    s << indent << "Throttle: ";
    Printer<float>::stream(s, indent + "  ", v.Throttle);
    s << indent << "Speed: ";
    Printer<float>::stream(s, indent + "  ", v.Speed);
    s << indent << "Mod1: ";
    Printer<int32_t>::stream(s, indent + "  ", v.Mod1);
    s << indent << "Mod2: ";
    Printer<int32_t>::stream(s, indent + "  ", v.Mod2);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ARDUINO_MESSAGE_ARDUINOMSG_H
